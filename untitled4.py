# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aY4lNs131MibKjGgkRRk-PMVTWnYdwxJ
"""

# app.py
!pip install streamlit
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
import xgboost as xgb
from imblearn.over_sampling import SMOTE

# --- App Title ---
st.title("Fraud Detection App")

# --- Upload Data ---
uploaded_file = st.file_uploader("Upload fraud dataset CSV", type=["csv"])
if uploaded_file:
    data = pd.read_csv(uploaded_file)
    st.write("### Data Preview", data.head())

    # --- Preprocessing ---
    data.drop(['zipcodeOri', 'zipMerchant'], axis=1, inplace=True)
    for col in data.select_dtypes(include=['object']).columns:
        data[col] = data[col].astype('category').cat.codes

    X = data.drop('fraud', axis=1)
    y = data['fraud']
    X.fillna(0, inplace=True)
    y.fillna(0, inplace=True)

    sm = SMOTE(random_state=42)
    X_res, y_res = sm.fit_resample(X, y)

    X_train, X_test, y_train, y_test = train_test_split(
        X_res, y_res, test_size=0.3, random_state=42, stratify=y_res
    )

    # --- Classifier Selection ---
    clf_choice = st.selectbox("Choose Classifier", ["KNN", "Random Forest", "XGBoost"])

    if st.button("Train and Evaluate"):
        if clf_choice == "KNN":
            model = KNeighborsClassifier(n_neighbors=5, p=1)
        elif clf_choice == "Random Forest":
            model = RandomForestClassifier(n_estimators=100, max_depth=8, class_weight="balanced", random_state=42)
        elif clf_choice == "XGBoost":
            model = xgb.XGBClassifier(eval_metric="logloss", use_label_encoder=False)

        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        st.text("Classification Report:")
        st.text(classification_report(y_test, y_pred))

        st.text("Confusion Matrix:")
        st.write(confusion_matrix(y_test, y_pred))

        try:
            y_probs = model.predict_proba(X_test)[:, 1]
            fpr, tpr, _ = roc_curve(y_test, y_probs)
            roc_auc = auc(fpr, tpr)

            fig, ax = plt.subplots()
            ax.plot(fpr, tpr, label='AUC = %0.2f' % roc_auc)
            ax.plot([0, 1], [0, 1], 'r--')
            ax.set_xlabel('False Positive Rate')
            ax.set_ylabel('True Positive Rate')
            ax.set_title('ROC Curve')
            ax.legend(loc="lower right")
            st.pyplot(fig)
        except Exception as e:
            st.warning("ROC curve failed: " + str(e))

